<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:mvc="http://www.springframework.org/schema/mvc" 
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd 
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-3.0.xsd 
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-3.1.xsd 
	http://www.springframework.org/schema/mvc 
	http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd">
	
	<mvc:annotation-driven />
	<context:annotation-config />
	<aop:aspectj-autoproxy />
	<context:component-scan base-package="com.rendp.auth">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
    
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- <bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"/>
    <bean class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"/>
    
    <bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping"/>
    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"/> -->
    
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
	    <property name="prefix" value="/WEB-INF/views" />
	    <property name="suffix" value=".jsp" />
	</bean>
    
    <mvc:default-servlet-handler />
    <mvc:resources mapping="/styles/**" location="/css/"/>
    
    <!-- 定义使用C3P0连接池的数据源 -->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <!-- 指定连接数据库的JDBC驱动 -->
        <property name="driverClassName">
            <value>com.mysql.jdbc.Driver</value>
        </property>
        <!-- 连接数据库所用的URL -->
        <property name="url">
            <value>jdbc:mysql://127.0.0.1:3306/auth?useUnicode=true</value>
        </property>
        <!-- 连接数据库的用户名 -->
        <property name="username">
            <value>root</value>
        </property>
        <!-- 连接数据库的密码 -->
        <property name="password">
            <value>rendp</value>
        </property>
    </bean>
    
    <!-- <bean id="login" class="com.rendp.auth.controller.LoginController">
    </bean> -->
    <!-- 定义Hibernate的SessionFactory -->
<!--     <bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
        依赖注入上面定义的数据源dataSource
        <property name="dataSource" ref="dataSource" />
        注册Hibernate的ORM映射文件
        <property name="mappingResources">
            <list>
                <value>com/eportal/ORM/News.hbm.xml</value>
                <value>com/eportal/ORM/Category.hbm.xml</value>
                <value>com/eportal/ORM/Memberlevel.hbm.xml</value>
                <value>com/eportal/ORM/Cart.hbm.xml</value>
                <value>com/eportal/ORM/Traffic.hbm.xml</value>
                <value>com/eportal/ORM/Newsrule.hbm.xml</value>
                <value>com/eportal/ORM/Merchandise.hbm.xml</value>
                <value>com/eportal/ORM/Admin.hbm.xml</value>
                <value>com/eportal/ORM/Orders.hbm.xml</value>
                <value>com/eportal/ORM/Cartselectedmer.hbm.xml</value>
            </list>
        </property>
        设置Hibernate的相关属性  
        <property name="hibernateProperties">  
            <props>  
                设置Hibernate的数据库方言  
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>  
                设置Hibernate是否在控制台输出SQL语句，开发调试阶段通常设为true  
                <prop key="show_sql">true</prop>  
                设置Hibernate一个提交批次中的最大SQL语句数  
                <prop key="hibernate.jdbc.batch_size">50</prop>  
                <prop key="show_sql">50</prop>  
            </props>  
        </property>  
    </bean>  
    定义Hibernate的事务管理器HibernateTransactionManager  
    <bean id="transactionManager"  
        class="org.springframework.orm.hibernate3.HibernateTransactionManager">  
        依赖注入上面定义的sessionFactory  
        <property name="sessionFactory" ref="sessionFactory" />  
    </bean>  
    定义Spring的事务拦截器TransactionInterceptor  
    <bean id="transactionInterceptor"  
        class="org.springframework.transaction.interceptor.TransactionInterceptor">  
        依赖注入上面定义的事务管理器transactionManager  
        <property name="transactionManager" ref="transactionManager" />  
        定义需要进行事务拦截的方法及所采用的事务控制类型  
        <property name="transactionAttributes">  
            <props>  
                以browse、list、load、get及is开头的所有方法采用只读型事务控制类型  
                <prop key="browse*">PROPAGATION_REQUIRED,readOnly</prop>  
                <prop key="list*">PROPAGATION_REQUIRED,readOnly</prop>  
                <prop key="load*">PROPAGATION_REQUIRED,readOnly</prop>  
                <prop key="get*">PROPAGATION_REQUIRED,readOnly</prop>  
                <prop key="is*">PROPAGATION_REQUIRED,readOnly</prop>  
                所有方法均进行事务控制，如果当前没有事务，则新建一个事务  
                <prop key="*">PROPAGATION_REQUIRED</prop>  
            </props>  
        </property>  
    </bean>
    定义BeanNameAutoProxyCreatorf进行Spring的事务处理  
    <bean  
        class="org.springframework.aop.framework.autoproxy.    
BeanNameAutoProxyCreator">  
        针对指定的bean自动生成业务代理  
        <property name="beanNames">  
            <list>  
                <value>adminService</value>  
                <value>columnsService</value>  
                <value>newsService</value>  
                <value>crawlService</value>  
                <value>memberLevelService</value>  
                <value>memberService</value>  
                <value>categoryService</value>  
                <value>merService</value>  
                <value>cartService</value>  
                <value>ordersService</value>  
                <value>trafficService</value>  
            </list>  
        </property>  
        这个属性为true时，表示被代理的是目标类本身而不是目标类的接口  
        <property name="proxyTargetClass">  
            <value>true</value>  
        </property>  
        依赖注入上面定义的事务拦截器transactionInterceptor  
        <property name="interceptorNames">  
            <list>  
                <value>transactionInterceptor</value>  
            </list>  
        </property>  
    </bean>  
    装配通用数据库访问类BaseDAOImpl  
    <bean id="dao" class="com.eportal.DAO.BaseDAOImpl">  
        <property name="sessionFactory" ref="sessionFactory" />  
    </bean>  
    部署系统用户管理业务逻辑组件AdminServiceImpl  
    <bean id="adminService" class="com.eportal.service.AdminServiceImpl">  
        <property name="dao" ref="dao" />  
    </bean>  
    部署新闻栏目管理业务逻辑组件ColumnsServiceImpl  
    <bean id="columnsService" class="com.eportal.service.ColumnsServiceImpl">  
        <property name="dao" ref="dao" />  
    </bean>  
      
    部署订单管理业务逻辑组件OrderServiceImpl  
    <bean id="ordersService" class="com.eportal.service.OrderServiceImpl">  
        <property name="dao" ref="dao" />  
    </bean>  
    部署流量统计业务逻辑组件TrafficServiceImpl  
    <bean id="trafficService" class="com.eportal.service.TrafficServiceImpl">  
        <property name="dao" ref="dao" />  
    </bean>  
    部署Struts 2负责系统用户管理的控制器AdminAction  
    <bean id="adminAction" class="com.eportal.struts.action.  
AdminAction"  
        scope="prototype">  
        <property name="service" ref="adminService" />  
    </bean>  
    部署Struts 2负责新闻栏目管理的控制器ColumnsAction  
    <bean id="columnsAction" class="com.eportal.struts.action.  
ColumnsAction"  
        scope="prototype">  
        <property name="service" ref="columnsService" />  
    </bean>  
    部署Struts 2负责新闻管理的控制器NewsAction  
    <bean id="newsAction" class="com.eportal.struts.action.  
NewsAction"  
        scope="prototype">  
        <property name="service" ref="newsService" />  
        <property name="columnsService" ref="columnsService" />  
    </bean>  
    部署Struts 2负责新闻采集规则管理的控制器CrawlAction  
    <bean id="crawlAction" class="com.eportal.struts.action.  
CrawlAction"  
        scope="prototype">  
        <property name="service" ref="crawlService" />  
        <property name="columnsService" ref="columnsService" />  
    </bean>
    -->
</beans>  